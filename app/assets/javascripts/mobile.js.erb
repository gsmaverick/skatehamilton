//= require zepto
//= require common

// Copyright 2011 OpenHamilton.  All Rights Reserved.

/**
 * @fileoverview Mobile javascript file to enable a native-like
 * experience on Android/iOS devices.
 * @author gavin.schulz@gmail.com (Gavin Schulz)
 *
 */

var App = {
  /**
   * Textual abbreviations of days of the week.
   * @type {array}
   *
   */
  days: ['Mon','Tues','Wed','Thurs','Fri','Sat','Sun'],

  /**
   * Map marker that shows the current location on which the map
   * is centered.
   * @type {google.maps.marker}
   *
   */
  locationMarker: null,

  /**
   * URL for the location marker icon used.
   * @type {string}
   */

  indoorMarker: '<%= asset_path "indoor.png" %>',
  outdoorMarker: '<%= asset_path "outdoor.png" %>',
  markerShadow: '<%= asset_path "marker-shadow.png" %>',

  /**
   * Google Map map object that ties to the main map canvas.
   * @type {google.maps.map}
   *
   */
  map: null,

  /**
   * Coordinates on which the map is currently centered.
   * @type {google.maps.LatLng}
   *
   */
  mapCenter: new google.maps.LatLng(43.24895389686911, -79.86236572265625),

  /**
   * All the map markers on the map that represent rinks.
   * @type {array}
   *
   */
  rinkMarkers: [],

  inputActive: false,

  /**
   * Closes the info bubble shown at load to the visitor.
   *
   */
  closeInfo: function() {
    $("#bubble_container").remove();
    $("#cover").remove();
  },

  init: function() {
    // People will see the pop-up every time so as to give us
    // more time to load the map and rinks in the background
    $(".tap-closeable").bind('click', function() {
      App.closeInfo();
      $(".tap-closeable").unbind();
    });

    // Seeing the full details of a rink
    $("#rink_popup").live('click', function() {
      $.getJSON(rinkPath + '/' + $("#rink_popup").attr("rink-id"), function(data) {
        var template = Handlebars.compile($("#rink-detail-template").html());
        data.rink_type = data.rink_type.charAt(0).toUpperCase() + data.rink_type.slice(1);
        $("#rink_details").html(template({ rink: data }));
      });

      var template = Handlebars.compile($("#rink-details-template").html());
      $("body").append(template());

      $("#rink_popup").remove();
      $("#header").append('<a href="#" class="button" id="back"><%= image_tag "arrow_left1.png", :alt => "Back", :size => "18x18" %></a>');
      $("#map").hide();
    });

    // Action fired when you click on the back button
    $("#back").live('click', function(e) {
      $("#map").show();
      $("#rink_details").remove();
      $("#search_container").remove();
      $("#back").remove();
      window.scrollTo(0,1);
      google.maps.event.trigger(App.map, 'resize');
      e.preventDefault();
    });

    $("#search").live('click', function(e) {
      /*$('#search_box').toggle();
      window.scrollTo(0,1);*/
      var template = Handlebars.compile($("#search-template").html());
      $("body").append(template());
      $("#map").hide();
      $("#header").append('<a href="#" class="button" id="back"><%= image_tag "arrow_left1.png", :alt => "Back", :size => "18x18" %></a>');
      e.preventDefault();
    });

    $("#query").live('focus', function(e) {
      alert('focus');
      App.inputActive = true;
    });

    $("#query").live('blur', function(e) {
      App.inputActive = false;
    });

    Handlebars.registerHelper('activity', function(activity) {
      var formatDate = function(start, end) {
        // Cache some parts of the dates
        var startHour    = parseInt(start.slice(0,2), 10);
        var startMinutes = parseInt(start.slice(3,5), 10);
        var endHour      = parseInt(end.slice(0,2), 10);
        var endMinutes   = parseInt(end.slice(3,5), 10);

        startMinutes = (startMinutes == 0) ? '' : ':' + startMinutes;
        endMinutes   = (endMinutes == 0)   ? '' : ':' + endMinutes;

        if (startHour > 12)
          startHour = '' + (startHour - 12);

        if (endHour >= 12)
          endHour = ((endHour > 12) ? (endHour - 12) : endHour) + endMinutes + 'pm';
        else if (endHour < 12)
          endHour += endMinutes + 'am';

        return startHour + startMinutes + '-' + endHour;
      };

      var s = '', dayString = '';
      var template = Handlebars.compile($("#activity-single-template").html());

      for(var i = 0, m = activity.times.length; i < m; i++) {
        dayString = '';

        // Extracting out the days the activity time takes place
        for(var j = 0, n = activity.times[i].days.length; j < n; j++)
          if (activity.times[i].days[j] == '1')
            dayString += App.days[j] + ', ';
        
        s += template({
          'name': (i > 0) ? '' : activity['name'],
          'day': dayString.slice(0, -2),
          'times': formatDate(activity.times[i].start_time, activity.times[i].end_time),
          'class': (i + 1 == m) ? 'last' : '',
          'rows': (i == 0) ? m : null
        });
      }

      return s;
    });
    
    window.scrollTo(0,1);
  },

  /**
   * Performs the necessary initializations for the google map to 
   * start loading while we wait for the DOM to be ready.
   *
   */
  initializeMap: function() {
    // Fire off the geolocation and let it do its thing
    if (navigator.geolocation) 
      navigator.geolocation.getCurrentPosition(function(pos) {
        App.mapCenter = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
        App.updateCenter();
      });

    var mapOpts = {
      zoom: 14,
      center: App.mapCenter,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      streetViewControl: false,
      zoomControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER }
    };

    App.map = new google.maps.Map(document.getElementById('map'), mapOpts);

    // Adds all the markers once the tiles have loaded
    google.maps.event.addListener(App.map, 'tilesloaded', function() {
      for(var i = -1, l = rinks.length; ++i < l;) {
        App.rinkMarkers[i] = new google.maps.Marker({
          position: new google.maps.LatLng(rinks[i].latitude, rinks[i].longitude),
          map: App.map,
          title: rinks[i].name,
          info: [rinks[i].id, rinks[i].name, rinks[i].address, rinks[i].rink_type].join('|'),
          icon: new google.maps.MarkerImage(((rinks[i].rink_type == 'indoor') ? App.indoorMarker : App.outdoorMarker), new google.maps.Size(22, 31), new google.maps.Point(0,0), new google.maps.Point(0,31)),
          shadow: new google.maps.MarkerImage(App.markerShadow, new google.maps.Size(42,31), new google.maps.Point(0,0), new google.maps.Point(0,30))
        });

        google.maps.event.addListener(App.rinkMarkers[i], 'click', function(e) {
          App.updateBubble(this.info);
          $("#map").bind('touchstart', App.mapTouch);
        });
      }
    });

    App.updateCenter();
  },

  /**
   * Called when the map is touched after a marker has been pressed.  
   * Close the marker information div and unbinds itself.
   *
   */
  mapTouch: function() {
    $('#query').trigger('blur');
    $('#search_box').hide();
    $("#rink_popup").hide();
    window.scrollTo(0,1);
    $("#map").unbind('touchstart', App.mapTouch);
  },

  /**
   * Updates the bottom pop-up when clicking on a map marker.
   * Renders a Handlebars template with the provided information.
   * @param {string} title A pipe seperated string containing rink information.
   *
   */
  updateBubble: function(title) {
    var parts = title.split('|');
    var template = Handlebars.compile($("#rink-popup-template").html());
    $("body").append(template({
      name:    parts[1],
      address: parts[2],
      type:    parts[3].charAt(0).toUpperCase() + parts[3].slice(1)
    }));
    $("#rink_popup").attr('rink-id', parts[0]);
  },

  /**
   * Updates the position of the map marker to denote the position
   * the map is centered on.
   */
  updateCenter: function() {
    // Update the cookies for next time
    $.cookie('last_lat', App.mapCenter.lat());
    $.cookie('last_lng', App.mapCenter.lng());

    // Remove existing marker from the map
    if (this.locationMarker)
      this.locationMarker.setMap(null);

    // Center on current location
    this.locationMarker = new google.maps.Marker({
      position: this.mapCenter,
      map: this.map,
      title: "Current Location"
    });

    this.map.setCenter(this.mapCenter);
    this.map.setZoom(14); // TODO: fix zoom levels based on screen size
  },
};

// Fire off the app
google.maps.event.addDomListener(window, 'load', App.initializeMap);
$(document).ready(App.init);
window.onorientationchange = function() {
  window.scrollTo(0,1);
  google.maps.event.trigger(App.map, 'resize');
};

window.onresize = function() {
  if (App.inputActive) {
    window.scrollTo(0,1);
    alert('onresize');
  }
}